{"version":3,"sources":["actualApp/endpoints.ts","Loading.tsx","Error.tsx","actualApp/VeranstaltungsContainer.tsx","api/useGetRequest.tsx","api/usePostRequestCalendar.tsx","api/usePostRequestCalendarEmail.tsx","App.tsx","reportWebVitals.ts","FAQ/FAQ.tsx","index.tsx"],"names":["baseUrl","Loading","className","Error","error","xmlns","fill","viewBox","d","msg","VeranstaltungsContainer","history","useHistory","useState","veranstaltungsData","setVeranstaltungsData","email","setEmail","loading","setLoading","setError","veranstaltungsIds","path","getData","fetch","method","headers","undefined","then","response","a","ok","json","useGetRequest","getCalendar","body","JSON","stringify","blob","usePostRequestCalendar","getCalendarEmailResponse","usePostRequestCalendarEmail","gridRef","useRef","useEffect","catch","err","message","fetchData","length","onClick","current","api","getSelectedNodes","map","node","data","push","id","saveAs","href","target","rel","type","placeholder","onChange","e","value","style","height","rowData","enableRangeSelection","rowSelection","ref","rowMultiSelectWithClick","onFirstDataRendered","sizeColumnsToFit","field","width","sortable","filter","checkboxSelection","resizable","headerName","floatingFilter","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","FAQ","goBack","src","process","alt","ReactDOM","render","StrictMode","exact","document","getElementById"],"mappings":"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","file":"static/js/main.a220a75d.chunk.js","sourcesContent":["export const baseUrl = \"https://moin.meister.ovh:8443\"\n","export default function Loading(){\n  return(\n    <button className=\"btn btn-lg loading\">loading</button>\n  );\n}\n","interface errorProp {\n  msg: string\n}\n\nexport default function Error(error: errorProp){\n  return(\n    <div className=\"alert alert-error m-4\">\n      <div className=\"flex-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" className=\"w-6 h-6 mx-2 stroke-current\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n        d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\"/>\n          </svg>\n          <label>{error.msg}</label>\n      </div>\n    </div>\n  )\n}\n","import {useEffect, useRef, useState} from \"react\";\nimport {baseUrl} from \"./endpoints\";\nimport useGetRequest from \"../api/useGetRequest\";\nimport Veranstaltung from \"./Veranstaltung\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport {AgGridColumn, AgGridReact} from \"ag-grid-react\";\nimport usePostRequestCalendar from \"../api/usePostRequestCalendar\";\nimport {saveAs} from 'file-saver'\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine-dark.css';\nimport '../index.scss'\nimport {useHistory} from \"react-router-dom\";\nimport usePostRequestCalendarEmail from \"../api/usePostRequestCalendarEmail\";\n\nexport default function VeranstaltungsContainer() {\n  const history = useHistory();\n  const [veranstaltungsData, setVeranstaltungsData] = useState([] as Veranstaltung[]);\n  const [email, setEmail] = useState(\"\")\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\")\n  let veranstaltungsIds = [] as number[]\n  const veranstaltungsPath = `${baseUrl}/getVeranstaltungen`;\n  const {getData} = useGetRequest({path: veranstaltungsPath})\n  const {getCalendar} = usePostRequestCalendar({\n    path: `${baseUrl}/sememesteriCal`,\n    veranstaltungsIds: veranstaltungsIds\n  })\n  const {getCalendarEmailResponse} = usePostRequestCalendarEmail({\n    path: `${baseUrl}/sememesteriCalEmail`,\n    veranstaltungsIds: veranstaltungsIds,\n    email: email\n  })\n  const gridRef = useRef(null)\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json) {\n        setVeranstaltungsData(json);\n        setLoading(false)\n      }).catch(err => {\n          setError(err.message)\n          setLoading(false);\n        }\n      );\n    }\n\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  function handleClick() {\n    history.push(\"/FAQ\");\n  }\n\n  const onButtonClickDownloadCalendar = () => {\n    // @ts-ignore\n    const selectedNodes = gridRef.current.api.getSelectedNodes()\n    // @ts-ignore\n    const selectedData = selectedNodes.map(node => node.data)\n    // @ts-ignore\n    selectedData.map(node => veranstaltungsIds.push(node.id))\n    const downloadCalendar = () => {\n      getCalendar().then(blob => saveAs(blob, 'calendar.ics'))\n        .catch(err => {\n            setError(err.message)\n            setLoading(false);\n          }\n        );\n    }\n    downloadCalendar();\n  }\n\n  const onEmailWantToSchick = () => {\n    // @ts-ignore\n    const selectedNodes = gridRef.current.api.getSelectedNodes()\n    // @ts-ignore\n    const selectedData = selectedNodes.map(node => node.data)\n    // @ts-ignore\n    selectedData.map(node => veranstaltungsIds.push(node.id))\n    const sentCalendarEmail = () => {\n      getCalendarEmailResponse()\n        .then(response => {\n        })\n        .catch(err => {\n            setError(err.message)\n          }\n        );\n    }\n    sentCalendarEmail();\n  }\n\n  if (loading) {\n    return <Loading/>\n  }\n\n  if (error.length > 0) {\n    return (\n      <Error msg={error}/>\n    );\n  }\n\n  return (\n    <div className={\"\"}>\n      <div className={\"grid grid-cols-3 mb-4 max-h-96 gap-4\"}>\n        <div className={\"col-span-2 2xl:col-span-1 rounded-box p-4 bg-base-300 flex-grow-0\"}>\n          <h2 className={\"text-4xl mb-2\"}>H-BRS Kalendergenerator</h2>\n          <p>Die Seite befindet sich noch in der Beta Phase, Fehler bitte melden! (a(at)andrevr.de)</p>\n          <p>Ich übernehme keine Haftung für die Richtigkeit der generierten Daten, alles nach bestem Wissen und\n            Gewissen.</p>\n        </div>\n      </div>\n\n      <div className={\"grid grid-rows-2 mt-4 gap-4 xl:w-9/12 mb-4\"}>\n        <div className={\"grid grid-cols-2 gap-4 w-5/12 rounded-box p-3 bg-base-300\"}>\n          <button onClick={onButtonClickDownloadCalendar} className={\"btn btn-lg\"}>Hol dir deinen Kalender!</button>\n          <a href={\"https://github.com/Hochgesand/H-BRSiCalGenerator\"} target=\"_blank\" rel=\"noopener noreferrer\">\n            <button className={\"btn btn-lg\"}>Gib mir einen Stern auf Github ❤</button>\n          </a>\n        </div>\n        <div className={\"grid grid-cols-3 gap-4 w-1/2 rounded-box p-3 bg-base-300 flex-row\"}>\n          <input\n            className=\"appearance-none w-auto bg-base-200 text-white border border-white rounded py-4 px-4 leading-tight focus:outline-none focus:bg-base-400 text-2xl\"\n            id=\"grid-first-email\" type=\"text\" placeholder=\"E-Mail\" onChange={e => setEmail(e.target.value)}\n          />\n          <button className={\"btn btn-lg\"} type={\"submit\"} onClick={onEmailWantToSchick}>Schicks per E-Mail</button>\n          <button className={\"btn btn-lg\"} onClick={handleClick}>HILFE!</button>\n        </div>\n      </div>\n\n      <div className={\"ag-theme-alpine-dark rounded-box p-3 bg-base-300\"} style={{height: 800}}>\n        <AgGridReact\n          rowData={veranstaltungsData}\n          enableRangeSelection={true}\n          rowSelection={\"multiple\"}\n          ref={gridRef}\n          rowMultiSelectWithClick={true}\n          // @ts-ignore\n          onFirstDataRendered={() => gridRef.current.api.sizeColumnsToFit()}\n        >\n          <AgGridColumn field=\"name\" width={380} sortable={true} filter={true} checkboxSelection={true} resizable={true}\n                        headerName={\"Veranstaltung\"} floatingFilter={true}/>\n          <AgGridColumn field=\"prof\" width={150} sortable={true} filter={true} resizable={true}\n                        floatingFilter={true}/>\n          <AgGridColumn field=\"studienGangSemester\" width={400} sortable={true} filter={true} resizable={true}\n                        floatingFilter={true} headerName={\"Fachbereich / Semester\"}/>\n        </AgGridReact>\n      </div>\n\n    </div>\n  );\n\n}\n","interface GetRequestProps {\n  readonly path: string;\n}\n\nexport default function useGetRequest({ path }: GetRequestProps) {\n  const getData = () => fetch(path, {\n    method: \"get\",\n    headers: \"\"\n      ? new Headers({\n        \"Content-Type\": \"application/json\"\n      }) : undefined\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.json()\n  });\n\n  return { getData  };\n}\n","interface PostRequestProps {\n  readonly path: string;\n  readonly veranstaltungsIds: number[];\n}\n\nexport default function usePostRequestCalendar({ path, veranstaltungsIds }: PostRequestProps) {\n  const getCalendar = () => fetch(path, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({veranstaltungsIds} )\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.blob()\n  });\n\n  return { getCalendar  };\n}\n","interface PostRequestProps {\n  readonly path: string;\n  readonly veranstaltungsIds: number[];\n  readonly email: string;\n}\n\nexport default function usePostRequestCalendar({ path, veranstaltungsIds, email }: PostRequestProps) {\n  const getCalendarEmailResponse = () => fetch(path, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({veranstaltungsIds, email} )\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not send E-Mail\");\n    }\n    return response\n  });\n\n  return { getCalendarEmailResponse  };\n}\n","import React from 'react';\nimport './App.scss';\nimport VeranstaltungsContainer from \"./actualApp/VeranstaltungsContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VeranstaltungsContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useHistory} from \"react-router-dom\";\n\nexport default function FAQ(){\n  let history = useHistory();\n  return(\n    <div className={\"p-5 flex-col gap-3\"}>\n      <button\n        className=\"btn btn-lg mb-4\"\n        onClick={() => history.goBack()}>\n        Back\n      </button>\n      <div className={\"rounded-box p-4 bg-base-300 flex-grow-0 w-1/2\"}>\n        <p className={\"text-3xl\"}>Anleitung:</p>\n        <p className={\"text-2xl\"}>Schritt 1:</p>\n        <p>Wähle dir einfach alle Veranstaltungen aus die du besuchen möchtest.\n          Du kannst die Tabelle nach belieben sortieren und mit dem Burgerbutton kannst du auch gezielt\n          nach Keywords suchen. Wenn du alle Veranstaltungen ausgewählt hast... </p>\n        <p className={\"text-2xl\"}>Schritt 2: </p>\n        <p>Jetzt hast du zwei Möglichkeiten:\n          1.: Klicke auf \"Hol dir deinen Kalender\" und importiere es wie in Beispiel 3 einfach selber am Rechner.\n          2.: Tippe deine E-Mail Adresse ein und lasse es dir bequem per E-Mail Schicken. Klicke dafür einfach nachdem\n           du deine E-Mail Adresse eingetragen hast auf \"Schicks per E-Mail\".\n        </p>\n        <p className={\"text-2xl\"}>Misc:</p>\n        <p>Packages und Technologien die ich benutzt habe:</p>\n        <p>Spring Boot (Java):</p>\n        <ul>\n          <li> - Apache POI um Exceltabellen zu parsen</li>\n          <li> - ical4j um den Calender zu generieren</li>\n        </ul>\n        <p>React:</p>\n        <ul>\n          <li> - AGGrid für die Tabelle, kein Bock gehabt selber Sortieralgorithmen zu implementieren</li>\n          <li> - Locker noch ca. 2000 Packages mehr die mit React gekommen sind, npm macht npm sachen</li>\n        </ul>\n      </div>\n\n      <div className={\"mt-5\"}>\n        <p className={\"text-3xl\"}>Beispiel 1: \"Ich bin bei Herr Berrendorf in EidiP und gehöre der Gruppe D an.</p>\n        <img src={process.env.PUBLIC_URL + \"/FUiTCuS2BJ.gif\"} alt={\"\"}/>\n      </div>\n      <div className={\"mt-5\"}>\n        <p className={\"text-3xl\"}>Beispiel 2: \"Hilfe ich sehe nicht den ganzen Text!</p>\n        <img src={process.env.PUBLIC_URL + \"/aTkfaQusHi.gif\"} alt={\"\"}/>\n      </div>\n      <div className={\"mt-5\"}>\n        <p className={\"text-3xl\"}>Beispiel 3: \"Is ja alles schön und toll, aber was mache ich jetzt mit dieser komischen calendar.ics Datei (Beispiel an Google Kalender)\"</p>\n        <img src={process.env.PUBLIC_URL + \"/Z795yqtZO4.gif\"} alt={\"\"}/>\n      </div>\n\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport FAQ from \"./FAQ/FAQ\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/FAQ\">\n          <FAQ/>\n        </Route>\n        <Route path=\"/\">\n          <App/>\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}