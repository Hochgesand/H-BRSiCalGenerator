{"version":3,"sources":["actualApp/endpoints.ts","Loading.tsx","Error.tsx","actualApp/VeranstaltungsContainer.tsx","api/useGetRequest.tsx","api/usePostRequestCalendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["baseUrl","Loading","className","Error","error","xmlns","fill","viewBox","d","msg","VeranstaltungsContainer","useState","veranstaltungsData","setVeranstaltungsData","loading","setLoading","setError","veranstaltungsIds","path","getData","fetch","method","headers","undefined","then","response","a","ok","json","useGetRequest","getCalendar","body","JSON","stringify","blob","usePostRequestCalendar","gridRef","useRef","useEffect","catch","err","message","fetchData","length","style","height","width","href","onClick","current","api","getSelectedNodes","map","node","data","push","id","saveAs","rowData","enableRangeSelection","rowSelection","ref","rowMultiSelectWithClick","onFirstDataRendered","sizeColumnsToFit","field","sortable","filter","checkboxSelection","resizable","headerName","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c08ae6f.chunk.js","sourcesContent":["export const baseUrl = \"https://moin.meister.ovh:8443\"\n","export default function Loading(){\n  return(\n    <button className=\"btn btn-lg loading\">loading</button>\n  );\n}\n","interface errorProp {\n  msg: string\n}\n\nexport default function Error(error: errorProp){\n  return(\n    <div className=\"alert alert-error m-4\">\n      <div className=\"flex-1\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" className=\"w-6 h-6 mx-2 stroke-current\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n        d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636\"/>\n          </svg>\n          <label>{error.msg}</label>\n      </div>\n    </div>\n  )\n}\n","import {useEffect, useRef, useState} from \"react\";\nimport {baseUrl} from \"./endpoints\";\nimport useGetRequest from \"../api/useGetRequest\";\nimport Veranstaltung from \"./Veranstaltung\";\nimport Loading from \"../Loading\";\nimport Error from \"../Error\";\nimport {AgGridColumn, AgGridReact} from \"ag-grid-react\";\nimport usePostRequestCalendar from \"../api/usePostRequestCalendar\";\nimport {saveAs} from 'file-saver'\n\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\n\nexport default function VeranstaltungsContainer() {\n\n  const [veranstaltungsData, setVeranstaltungsData] = useState([] as Veranstaltung[]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\")\n  let veranstaltungsIds = [] as number[]\n  const path = `${baseUrl}/getVeranstaltungen`;\n  const {getData} = useGetRequest({path: path})\n  const {getCalendar} = usePostRequestCalendar({\n    path: `${baseUrl}/sememesteriCal`,\n    veranstaltungsIds: veranstaltungsIds\n  })\n  const gridRef = useRef(null)\n\n  useEffect(() => {\n    async function fetchData() {\n      await getData().then(function (json) {\n        setVeranstaltungsData(json);\n        setLoading(false)\n      }).catch(err => {\n          setError(err.message)\n          setLoading(false);\n        }\n      );\n    }\n\n    fetchData();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const onButtonClick = () => {\n    // @ts-ignore\n    const selectedNodes = gridRef.current.api.getSelectedNodes()\n    // @ts-ignore\n    const selectedData = selectedNodes.map(node => node.data)\n    // @ts-ignore\n    selectedData.map(node => veranstaltungsIds.push(node.id))\n    const downloadCalendar = () => {\n      getCalendar().then(blob => saveAs(blob, 'calendar.ics'))\n        .catch(err => {\n            setError(err.message)\n            setLoading(false);\n          }\n        );\n    }\n    downloadCalendar();\n  }\n\n  if (loading) {\n    return <Loading/>\n  }\n\n  if (error.length > 0) {\n    return (\n      <Error msg={error}/>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"ag-theme-material\" style={{height: 800, width: 1300}}>\n        <h2>H-BRS Kalendergenerator</h2>\n        <p>Anleitung: Wähle dir einfach alle Veranstaltungen aus die du besuchen möchtest.\n          Du kannst die Tabelle nach belieben sortieren und mit dem Burgerbutton kannst du auch gezielt\n          nach Keywords suchen. Wenn du alle Veranstaltungen ausgewählt hast klick einfach\n          auf dem Button \"Hol dir deinen Kalender!\" Du kriegst deinen Kalender als .ics Datei ausgegeben,\n          diese Datei kannst du einfach in der Kalendersoftware deiner Wahl importieren.\n          Wenn du nicht weißt wie das geht, google es für deine Software.</p>\n        <h3><a href={\"https://github.com/Hochgesand/H-BRSiCalGenerator\"}>Gebt mir einen Stern auf Github ❤</a></h3>\n        <p>Ich übernehme keine Haftung für die Richtigkeit der generierten Daten, alles nach bestem Wissen und Gewissen.</p>\n        <button onClick={onButtonClick}>Hol dir deinen Kalender!</button>\n        <AgGridReact\n          rowData={veranstaltungsData}\n          enableRangeSelection={true}\n          rowSelection={\"multiple\"}\n          ref={gridRef}\n          rowMultiSelectWithClick={true}\n          // @ts-ignore\n          onFirstDataRendered={() => gridRef.current.api.sizeColumnsToFit()}\n        >\n          <AgGridColumn field=\"name\" width={400} sortable={true} filter={true} checkboxSelection={true} resizable={true} headerName={\"Veranstaltung\"}/>\n          <AgGridColumn field=\"prof\" width={150} sortable={true} filter={true} resizable={true}/>\n          <AgGridColumn field=\"studienGangSemester\" width={400} sortable={true} filter={true} resizable={true} headerName={\"Fachbereich / Semester\"} />\n        </AgGridReact>\n      </div>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <h3>Packages und Technologien die ich benutzt habe:</h3>\n      <p>Spring Boot (Java):</p>\n      <ul>\n        <li>Apache POI um Exceltabellen zu parsen</li>\n        <li>ical4j um den Calender zu generieren</li>\n      </ul>\n      <p>React:</p>\n      <ul>\n        <li>AGGrid für die Tabelle, kein Bock gehabt selber Sortieralgorithmen zu implementieren</li>\n        <li>Locker noch ca. 2000 Packages mehr die mit React gekommen sind, npm macht npm nachen</li>\n      </ul>\n    </div>\n\n  );\n\n}\n","interface GetRequestProps {\n  readonly path: string;\n}\n\nexport default function useGetRequest({ path }: GetRequestProps) {\n  const getData = () => fetch(path, {\n    method: \"get\",\n    headers: \"\"\n      ? new Headers({\n        \"Content-Type\": \"application/json\"\n      }) : undefined\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.json()\n  });\n\n  return { getData  };\n}\n","interface PostRequestProps {\n  readonly path: string;\n  readonly veranstaltungsIds: number[];\n}\n\nexport default function usePostRequestCalendar({ path, veranstaltungsIds }: PostRequestProps) {\n  const getCalendar = () => fetch(path, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({veranstaltungsIds} )\n  }).then(async (response) => {\n    if (!response.ok){\n      throw Error(\"Could not fetch data\");\n    }\n    return response.blob()\n  });\n\n  return { getCalendar  };\n}\n","import React from 'react';\nimport './App.css';\nimport VeranstaltungsContainer from \"./actualApp/VeranstaltungsContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VeranstaltungsContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}